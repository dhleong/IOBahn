

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'android-library'

dependencies {
    compile fileTree(dir: 'libs')

    compile 'com.google.code.gson:gson:2.2.4'
    compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'

    // compile 'com.google.android:support-v4:r7'
    // compile 'com.android.support:appcompat-v7:19.1.+'
}

android {
    compileSdkVersion 19
    buildToolsVersion '19.0.3'

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        test {
            java.srcDirs = ['src/test/java']
        }
    }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    task.from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    artifacts.add('archives', task);
}


task cleanjar(type: Exec) {
    // jarjar refuses to run with these things present
    commandLine 'zip', '-d', 'build/libs/IOBahn.jar', 
        'META-INF/ASL2.0', 'META-INF/LICENSE', 'META-INF/NOTICE'
}
task copyjar(type: Exec, dependsOn: cleanjar) {
    commandLine 'java', '-jar', './jarjar-1.4.jar', 
        'process', './jarjar.rules', 'build/libs/IOBahn.jar', '../robocon/library/libs/IOBahn.jar'
}
